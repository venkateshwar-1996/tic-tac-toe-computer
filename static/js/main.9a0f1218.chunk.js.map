{"version":3,"sources":["Components/Square.jsx","Components/MinMax.jsx","Components/TicTacToe.jsx","Components/Calculation.js","Components/NavigationBar.jsx","App.js","serviceWorker.js","index.js"],"names":["Square","state","isHover","checked","firstPlayer","undefined","makeHoverTrue","setState","makeHoverFalse","changeClass","props","setBoxes","id","console","log","reset","this","x","icon","faCheckCircle","size","color","o","faTimesCircle","classes","Col","xs","md","sm","onClick","onMouseEnter","onMouseLeave","className","Component","Board","tic","level","flink","dlink","ulink","val","MinMax","maketree1","board","maketree","t1","i","w","temp","fresh","checkIfAnyEmpty","Math","floor","map","arr","slice","checkStatus","flag","minmax","min","max","subCheck","one","two","three","whoWins","TicTacToe","startByFirstPlayer","completed","points","player1","player2","computer","you","checkIfDraw","row","col","reSetGame","setComputer","setPlayer","resetScores","setPlayerTurnFirst","setPlayerTurnSecond","compute","newTic","pu","calculation","Fragment","Row","Container","item","key","disabled","Table","striped","bordered","hover","NavigationBar","Navbar","bg","variant","Brand","href","to","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9a0f1218.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./styles.css\";\r\nimport { Col } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faCheckCircle,\r\n  faTimesCircle\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass Square extends Component {\r\n  state = { isHover: false, checked: false, firstPlayer: undefined };\r\n\r\n  componentWillReceiveProps(props) {\r\n    // const { checked } = this.state;\r\n    console.log(\"reset:\", props.reset, props.id);\r\n    if (props.reset == -1) {\r\n      this.setState({ isHover: false, checked: false, firstPlayer: undefined });\r\n    } else if (props.reset == 1) {\r\n      this.setState({ isHover: false, checked: true, firstPlayer: true });\r\n    } else if (props.reset == 0) {\r\n      this.setState({ isHover: false, checked: true, firstPlayer: false });\r\n    }\r\n  }\r\n  makeHoverTrue = () => {\r\n    // console.log(\"enter\");\r\n    this.setState({ isHover: true });\r\n  };\r\n  makeHoverFalse = () => {\r\n    // console.log(\"enter\");\r\n    this.setState({ isHover: false });\r\n  };\r\n  changeClass = () => {\r\n    // console.log(\"this.props: \", this.props);\r\n    if (this.props.setBoxes(this.props.id)) {\r\n      // const checked = true;\r\n      // console.log(\"before: \", this.state);\r\n      this.setState({ checked: true, firstPlayer: this.props.firstPlayer });\r\n\r\n      // console.log(\"before: \", this.state);\r\n      // const isHover = undefined;\r\n    }\r\n    // this.props.compute();\r\n  };\r\n  render() {\r\n    // console.log(this.props);\r\n    const x = <FontAwesomeIcon icon={faCheckCircle} size=\"3x\" color=\"white\" />;\r\n    const o = <FontAwesomeIcon icon={faTimesCircle} size=\"3x\" color=\"white\" />;\r\n\r\n    const { checked, firstPlayer, isHover } = this.state;\r\n\r\n    var classes = checked\r\n      ? firstPlayer\r\n        ? \"checked firstPlayer \"\r\n        : \"checked secondPlayer \"\r\n      : \" \";\r\n    // classes += firstPlayer ? \"firstPlayer \" : \"secondPlayer \";\r\n    classes += isHover ? \"color-hover \" : \"color \";\r\n    // console.log(\"classes: \", classes);\r\n    return (\r\n      <Col\r\n        xs={3}\r\n        md={3}\r\n        sm={3}\r\n        onClick={this.changeClass}\r\n        onMouseEnter={this.makeHoverTrue}\r\n        onMouseLeave={this.makeHoverFalse}\r\n        className={classes}\r\n      >\r\n        <span className={checked ? \"icon\" : \"no-icon\"}>\r\n          {checked ? (firstPlayer ? o : x) : null}\r\n        </span>\r\n      </Col>\r\n    );\r\n    //   hello\r\n    // </Col>;\r\n  }\r\n}\r\n\r\nexport default Square;\r\n","export class Board {\r\n  constructor(tic, firstPlayer, level) {\r\n    this.tic = tic;\r\n    this.flink = null;\r\n    this.dlink = null;\r\n    this.ulink = null;\r\n    this.val = 0;\r\n    // this.cb = 0;\r\n    this.level = 0;\r\n    this.firstPlayer = firstPlayer;\r\n  }\r\n}\r\nexport class MinMax {\r\n  constructor() {\r\n    this.flag = 0;\r\n  }\r\n\r\n  maketree1 = board => {\r\n    // const t1;\r\n    // console.log(board.tic);\r\n    this.maketree(board);\r\n    // console.log(\"board\", board);\r\n    // process.emit(0);\r\n    if (board.flink == null && board.dlink == null) {\r\n      return;\r\n    }\r\n    // console.log(\"board\", board);\r\n    var t1 = board.dlink;\r\n    do {\r\n      // console.log(\"t11111111111111111111111111 before\", t1);\r\n      this.maketree1(t1);\r\n      // return;\r\n      // console.log(\"t11111111111111111111111111 after\", t1);\r\n      // break;\r\n      t1 = t1.flink;\r\n    } while (t1 != null);\r\n  };\r\n\r\n  maketree = board => {\r\n    var i, w;\r\n    var fresh = null,\r\n      temp;\r\n    if (!this.checkIfAnyEmpty(board) || board.val !== 0) {\r\n      // console.log(\"1234567890-123456567890-1234567890-\");\r\n      board.dlink = board.flink = null;\r\n    } else {\r\n      for (i = 0; i < 9; i++) {\r\n        if (board.tic[Math.floor(i / 3)][i % 3] === -1) {\r\n          if (!fresh) {\r\n            if (board.firstPlayer) w = 0;\r\n            else w = 1;\r\n          }\r\n          temp = new Board(\r\n            board.tic.map(function(arr) {\r\n              return arr.slice();\r\n            }),\r\n            !board.firstPlayer\r\n          );\r\n\r\n          // temp.firstPlayer = !board.firstPlayer;\r\n          temp.tic[Math.floor(i / 3)][i % 3] = w;\r\n          // temp.tic[Math.floor(i / 3)][i % 3] = temp.firstPlayer ? 1 : 0;\r\n\r\n          temp.level = board.level + 1;\r\n          this.checkStatus(temp);\r\n\r\n          if (temp.val > 0) board.val = temp.val - 1;\r\n          if (temp.val < 0) board.val = temp.val + 1;\r\n\r\n          if (!board.dlink && this.flag === 0) {\r\n            this.flag = 1;\r\n            board.dlink = temp;\r\n          } else {\r\n            fresh.flink = temp;\r\n          }\r\n          fresh = temp;\r\n        }\r\n      }\r\n    }\r\n    // return;\r\n    this.flag = 0;\r\n  };\r\n\r\n  minmax = board => {\r\n    var t1;\r\n    var min, max;\r\n    if (board.dlink == null) {\r\n      return;\r\n    }\r\n    t1 = board.dlink;\r\n    min = max = t1.val;\r\n    do {\r\n      this.minmax(t1);\r\n      if (t1.val > max) {\r\n        max = t1.val;\r\n      }\r\n      if (t1.val < min) {\r\n        min = t1.val;\r\n      }\r\n      t1 = t1.flink;\r\n    } while (t1 != null);\r\n    if (board.level % 2 === 0) {\r\n      board.val = max;\r\n    } else {\r\n      board.val = min;\r\n    }\r\n  };\r\n\r\n  checkIfAnyEmpty = board => {\r\n    const { tic } = board;\r\n    for (var i = 0; i < 9; i++) {\r\n      if (tic[Math.floor(i / 3)][i % 3] === -1) return true;\r\n    }\r\n    return false;\r\n  };\r\n  subCheck = (board, one, two, three) => {\r\n    const tic = board.tic;\r\n    if (\r\n      tic[Math.floor(one / 3)][one % 3] === -1 ||\r\n      tic[Math.floor(two / 3)][two % 3] === -1 ||\r\n      tic[Math.floor(three / 3)][three % 3] === -1\r\n    ) {\r\n      return false;\r\n    }\r\n    if (\r\n      tic[Math.floor(one / 3)][one % 3] === tic[Math.floor(two / 3)][two % 3] &&\r\n      tic[Math.floor(one / 3)][one % 3] ===\r\n        tic[Math.floor(three / 3)][three % 3] &&\r\n      tic[Math.floor(two / 3)][two % 3] ===\r\n        tic[Math.floor(three / 3)][three % 3]\r\n    )\r\n      return true;\r\n    else return false;\r\n  };\r\n  checkStatus = board => {\r\n    if (\r\n      this.subCheck(board, 0, 1, 2) ||\r\n      this.subCheck(board, 3, 4, 5) ||\r\n      this.subCheck(board, 6, 7, 8) ||\r\n      this.subCheck(board, 0, 3, 6) ||\r\n      this.subCheck(board, 1, 4, 7) ||\r\n      this.subCheck(board, 2, 5, 8) ||\r\n      this.subCheck(board, 0, 4, 8) ||\r\n      this.subCheck(board, 2, 4, 6)\r\n    ) {\r\n      if (!board.firstPlayer) {\r\n        board.val = 10;\r\n      } else {\r\n        board.val = -10;\r\n      }\r\n    } else {\r\n      board.val = 0;\r\n    }\r\n  };\r\n  whoWins = board => {\r\n    if (\r\n      this.subCheck(board, 0, 1, 2) ||\r\n      this.subCheck(board, 3, 4, 5) ||\r\n      this.subCheck(board, 6, 7, 8) ||\r\n      this.subCheck(board, 0, 3, 6) ||\r\n      this.subCheck(board, 1, 4, 7) ||\r\n      this.subCheck(board, 2, 5, 8) ||\r\n      this.subCheck(board, 0, 4, 8) ||\r\n      this.subCheck(board, 2, 4, 6)\r\n    ) {\r\n      if (board.firstPlayer) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    } else {\r\n      return undefined;\r\n    }\r\n  };\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Container, Row, Col, Button, Table } from \"react-bootstrap\";\r\nimport \"./styles.css\";\r\nimport Square from \"./Square\";\r\nimport { calculation } from \"./Calculation\";\r\nclass TicTacToe extends Component {\r\n  state = {\r\n    startByFirstPlayer: true,\r\n    firstPlayer: true,\r\n    tic: [[-1, -1, -1], [-1, -1, -1], [-1, -1, -1]],\r\n    completed: false,\r\n    points: {\r\n      player1: 0,\r\n      player2: 0,\r\n      computer: 0,\r\n      you: 0\r\n    },\r\n    computer: true\r\n  };\r\n\r\n  componentDidUpdate() {\r\n    const { completed, firstPlayer, tic, computer } = this.state;\r\n\r\n    if (computer && firstPlayer) {\r\n      this.compute();\r\n    }\r\n  }\r\n\r\n  subCheck(one, two, three) {\r\n    const { tic } = this.state;\r\n    if (\r\n      tic[Math.floor(one / 3)][one % 3] == -1 &&\r\n      tic[Math.floor(two / 3)][two % 3] == -1 &&\r\n      tic[Math.floor(three / 3)][three % 3] == -1\r\n    ) {\r\n      return false;\r\n    }\r\n    if (\r\n      tic[Math.floor(one / 3)][one % 3] == tic[Math.floor(two / 3)][two % 3] &&\r\n      tic[Math.floor(two / 3)][two % 3] == tic[Math.floor(three / 3)][three % 3]\r\n    )\r\n      return true;\r\n    else return false;\r\n  }\r\n\r\n  checkIfDraw() {\r\n    const { tic } = this.state;\r\n    for (var i = 0; i < 9; i++) {\r\n      if (tic[Math.floor(i / 3)][i % 3] == -1) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  checkStatus = firstPlayer => {\r\n    console.log(\"this.checkIfDraw(): \", this.checkIfDraw());\r\n    if (\r\n      this.subCheck(0, 1, 2) ||\r\n      this.subCheck(3, 4, 5) ||\r\n      this.subCheck(6, 7, 8) ||\r\n      this.subCheck(0, 3, 6) ||\r\n      this.subCheck(1, 4, 7) ||\r\n      this.subCheck(2, 5, 8) ||\r\n      this.subCheck(0, 4, 8) ||\r\n      this.subCheck(2, 4, 6)\r\n    ) {\r\n      const { points, computer } = this.state;\r\n      if (computer) {\r\n        points.computer += 1;\r\n      } else if (!firstPlayer) {\r\n        points.player1 += 1;\r\n      } else {\r\n        points.player2 += 1;\r\n      }\r\n      this.setState({ completed: true, points });\r\n    } else if (this.checkIfDraw()) {\r\n      this.setState({ completed: true, firstPlayer: undefined });\r\n    }\r\n  };\r\n\r\n  setBoxes = id => {\r\n    const row = Math.floor(id / 3);\r\n    const col = id % 3;\r\n    const { tic } = this.state;\r\n    if (tic[row][col] == -1) {\r\n      var { firstPlayer, computer } = this.state;\r\n      if (firstPlayer) tic[row][col] = 0;\r\n      else tic[row][col] = 1;\r\n\r\n      firstPlayer = !firstPlayer;\r\n      this.setState({ tic, firstPlayer }, () => {\r\n        console.log(\"new state\", this.state);\r\n      });\r\n\r\n      this.checkStatus(firstPlayer);\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n  reSetGame = () => {\r\n    console.log(\"reset\");\r\n    const { startByFirstPlayer } = this.state;\r\n    this.setState({\r\n      firstPlayer: startByFirstPlayer,\r\n      tic: [[-1, -1, -1], [-1, -1, -1], [-1, -1, -1]],\r\n      completed: false\r\n    });\r\n  };\r\n  setComputer = () => {\r\n    const { startByFirstPlayer } = this.state;\r\n\r\n    this.setState({\r\n      firstPlayer: startByFirstPlayer,\r\n      tic: [[-1, -1, -1], [-1, -1, -1], [-1, -1, -1]],\r\n      completed: false,\r\n      computer: true\r\n    });\r\n  };\r\n  setPlayer = () => {\r\n    console.log(\"reset\");\r\n    this.setState({\r\n      firstPlayer: false,\r\n      tic: [[-1, -1, -1], [-1, -1, -1], [-1, -1, -1]],\r\n      completed: false,\r\n      computer: false\r\n    });\r\n  };\r\n  resetScores = () => {\r\n    console.log(\"reset\");\r\n    const { points } = this.state;\r\n    points.player1 = 0;\r\n    points.player2 = 0;\r\n    points.computer = 0;\r\n    points.you = 0;\r\n    this.setState({\r\n      points\r\n    });\r\n  };\r\n\r\n  setPlayerTurnFirst = () => {\r\n    this.setState({\r\n      startByFirstPlayer: false,\r\n      firstPlayer: false,\r\n      tic: [[-1, -1, -1], [-1, -1, -1], [-1, -1, -1]],\r\n      completed: false\r\n    });\r\n  };\r\n\r\n  setPlayerTurnSecond = () => {\r\n    this.setState({\r\n      firstPlayer: true,\r\n      startByFirstPlayer: true,\r\n      tic: [[-1, -1, -1], [-1, -1, -1], [-1, -1, -1]],\r\n      completed: false\r\n    });\r\n  };\r\n\r\n  compute = () => {\r\n    const { firstPlayer, tic, computer } = this.state;\r\n\r\n    var newTic = calculation(tic, firstPlayer);\r\n    console.log(\r\n      \"new-----------------------------------------------------------------------Tic: \",\r\n      computer,\r\n      firstPlayer\r\n    );\r\n    this.setState({ tic: newTic, firstPlayer: !firstPlayer }, () => {\r\n      console.log(\"new state\", this.state);\r\n      this.checkStatus(firstPlayer);\r\n    });\r\n  };\r\n  render() {\r\n    const { completed, firstPlayer, tic, computer } = this.state;\r\n\r\n    // if (computer && firstPlayer) {\r\n    //   this.compute();\r\n    // }\r\n\r\n    console.log(this.state);\r\n    return (\r\n      <React.Fragment>\r\n        <Row>\r\n          <Col md={8} sm={6} xs={12} className=\"main-div\">\r\n            <Container\r\n              className={\r\n                completed ? \"completed container-div\" : \"container-div \"\r\n              }\r\n            >\r\n              <div className=\"box\">\r\n                <Row>\r\n                  {[0, 1, 2, 3, 4, 5, 6, 7, 8].map(item => {\r\n                    return (\r\n                      <Square\r\n                        key={item}\r\n                        id={item}\r\n                        setBoxes={this.setBoxes}\r\n                        firstPlayer={firstPlayer}\r\n                        compute={this.compute}\r\n                        // reset={completed}\r\n                        reset={tic[Math.floor(item / 3)][item % 3]}\r\n                      />\r\n                    );\r\n                  })}\r\n                </Row>\r\n              </div>\r\n            </Container>\r\n            <Row className={completed ? \"show-button\" : \"hide-button\"}>\r\n              <Col md={12}>\r\n                <p>\r\n                  {firstPlayer == undefined ? \"Draw Match!\" : \"\"}\r\n                  {firstPlayer == false\r\n                    ? computer\r\n                      ? \"Computer wins\"\r\n                      : \"Player 2 Wins!\"\r\n                    : \"\"}\r\n                  {firstPlayer == true ? \"Player 1 Wins!\" : \"\"}\r\n                </p>\r\n              </Col>\r\n              <Col>\r\n                <button\r\n                  className=\"restart-button\"\r\n                  onClick={() => this.reSetGame()}\r\n                >\r\n                  Restart\r\n                </button>\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n          <Col md={3} sm={6} xs={12} className=\"button-div\">\r\n            <Row>\r\n              <button\r\n                className=\"restart-button\"\r\n                onClick={() => this.reSetGame()}\r\n              >\r\n                Restart\r\n              </button>\r\n              <button\r\n                className=\"restart-button\"\r\n                onClick={() => this.setComputer()}\r\n              >\r\n                Player vs Computer\r\n              </button>\r\n              <button\r\n                className=\"restart-button\"\r\n                onClick={() => this.setPlayerTurnSecond()}\r\n                disabled={!computer}\r\n              >\r\n                Play as second\r\n              </button>\r\n              <button\r\n                className=\"restart-button\"\r\n                onClick={() => this.setPlayerTurnFirst()}\r\n                disabled={!computer}\r\n              >\r\n                Play as first\r\n              </button>\r\n              <button\r\n                className=\"restart-button\"\r\n                onClick={() => this.setPlayer()}\r\n              >\r\n                Player vs Player\r\n              </button>\r\n              <button\r\n                className=\"restart-button\"\r\n                onClick={() => this.resetScores()}\r\n              >\r\n                Reset scores\r\n              </button>\r\n            </Row>\r\n            <Row>\r\n              <Table striped bordered hover>\r\n                <thead>\r\n                  <tr>\r\n                    {computer ? (\r\n                      <th key=\"you\">You</th>\r\n                    ) : (\r\n                      <th key=\"player1\">1st Player</th>\r\n                    )}\r\n                    {computer ? (\r\n                      <th key=\"comp\">Computer</th>\r\n                    ) : (\r\n                      <th key=\"player2\">2nd Player</th>\r\n                    )}\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr key=\"you\">\r\n                    {computer ? (\r\n                      <td>{this.state.points.you}</td>\r\n                    ) : (\r\n                      <td>{this.state.points.player1}</td>\r\n                    )}\r\n\r\n                    {computer ? (\r\n                      <td>{this.state.points.computer}</td>\r\n                    ) : (\r\n                      <td>{this.state.points.player2}</td>\r\n                    )}\r\n                  </tr>\r\n                </tbody>\r\n              </Table>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TicTacToe;\r\n","import { Board, MinMax } from \"./MinMax\";\r\nimport { First } from \"react-bootstrap/PageItem\";\r\n\r\nexport function calculation(tic, firstPlayer) {\r\n  // console.log(tic);\r\n  var board = new Board(\r\n    tic.map(arr => {\r\n      return arr.slice();\r\n    }),\r\n    firstPlayer\r\n  );\r\n  var min = new MinMax();\r\n  min.maketree1(board);\r\n  min.minmax(board);\r\n  // var pu = board.dl;\r\n  // while (pu != null) {\r\n  //   if (board.val == pu.val) {\r\n  //     console.log(pu);\r\n  //     if (min.whoWins(pu) == undefined) {\r\n  //       console.log(\"draw\");\r\n  //       break;\r\n  //     } else if (min.whoWins) {\r\n  //       console.log(\"first player\");\r\n  //       break;\r\n  //     } else if (!min.whoWins) {\r\n  //       console.log(\"second player\");\r\n  //       break;\r\n  //     }\r\n  //   }\r\n  //   pu = pu.fl;\r\n  // }\r\n  // board = pu;\r\n  var pu = board.dlink;\r\n  do {\r\n    if (board.val == pu.val) {\r\n      break;\r\n    }\r\n    pu = pu.flink;\r\n  } while (pu.flink != null);\r\n  // console.log(\"puuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu\", board, pu);\r\n  return pu.tic;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Navbar, Row } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport \"./styles.css\";\r\nclass NavigationBar extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Navbar bg=\"light\" variant=\"light\" className=\"navbar-class\">\r\n          <Navbar.Brand href=\"#home\">\r\n            <Link to=\"/\">\r\n              <h1>CodeTheHead.</h1>\r\n            </Link>\r\n          </Navbar.Brand>\r\n        </Navbar>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavigationBar;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport TicTacToe from \"./Components/TicTacToe\";\nimport NavigationBar from \"./Components/NavigationBar\";\n\nfunction App() {\n  return (\n    <Router>\n      <NavigationBar />\n      <Switch>\n        <Route path=\"/\" component={TicTacToe} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n// import \"font-awesome/css/font-awesome.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}